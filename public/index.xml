<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on The website of Xingqi</title>
    <link>/</link>
    <description>Recent content in Home on The website of Xingqi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Winter Solstice</title>
      <link>/life/winter-solstice/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/life/winter-solstice/</guid>
      <description>**冬至**王安石都城开博路，佳节一阳生。 喜见儿童色，欢传市井声。 幽闲亦聚集，珍丽各携擎。 却忆他年事，关商闭不行。
============================
世界上有两个我 一个想回家，一个想远行；
一个举杯邀明月，一个跪地捡碎银；
一个青衣白马徐凤年，一个烟火人间轻声言；
一个在文字里，白马春衫慢慢行，一个在生活里，蝇营狗苟兀穷年。
一个爱父母，一个恨出生。
一个归星河，一个归烟火。
一个理想中宁死不屈，一个世俗里屈打成招。
一个白天入世俗烟火，一个夜里独自孤独。
一个在晚霞背景下迎风舞蹈，一个为社会生活弯腰。
一个琴棋书画诗酒花，一个柴米油盐酱醋茶。
一个隐居山林不问世事，一个不惧世俗大胆相爱。
一个永远被偏爱，一个一直要懂事。</description>
    </item>
    
    <item>
      <title> python</title>
      <link>/study/python/</link>
      <pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/study/python/</guid>
      <description>python进阶 面向对象编程(oop) 面向过程：
1.把完成某一个需求的所有步骤从头到尾逐步实现
2.根据开发需求，将一些独立功能的代码，封装成一个又一个函数
3.最后完成的代码，就是顺序的调用不同的函数
特点
1.注重步骤与过程，不注重职责与分工
2.如果需求复杂，代码会变得很复杂
3.开发复杂项目，没有固定的套路，开发难度大!
面向对象
面向对象本身就是对面向过程的封装
侧重谁来做事情
如何从面向过程编程思想过渡到面向对象编程？&amp;mdash;&amp;mdash;&amp;ndash;&amp;gt;根据这个对对象以及对应的行为,抽象出对应的类.
类和对象使面向对象编程的两个核心概念
类 类是一类具有相同特征的，是抽象的，负责定义对象
类与对象的关系：
类是模板，对象根据对象这个模板创建出来的，应该先有类，再有对象
类只有一个，而对象可以有多个。
类到对象是一个实例化的过程
属性和变量的区别以及判断依据
变量是可以改变的量值 属性是属于某个对象的特征 访问权限
根据不同的位置存在不同的访问权限 属性:只能通过对象来进行访问 类的作用:
根据抽象的类,生产出具体的对象.
例举生活中的类:钱
对象:具体的1毛,5毛,100元
类的三要素：类名，属性，方法
对象的特征描述，通常定义为属性，对象具有的动作，通常定义为方法
实例方法
类体中定义实例方法
​	Python要求实例方法的第一个形参必须为self，也就是实例对象本身，因此实例方法至少应该有一个self参数。 在类体外将一个函数直接赋值给一个对象实例
这种动态定义实例方法，本质上就是动态增加实例变量，只是这个实例变量比较特殊，是个函数类型，对应的赋值也是一个函数。因此上述方法定义的实例方法，与类体中定义的方法还是有差别的，对这种方法Python 不会将实例对象自动绑定到方法的第一个参数，即使将第一个参数命名为 self 也没有用。
class Kls(object): def __init__(self, data): self.data = data def printd(self): print(self.data) ik1 = Kls(&amp;#39;leo&amp;#39;) ik2 = Kls(&amp;#39;lee&amp;#39;) ik1.printd() ik2.printd() 结果： leo lee 类方法
Python 的类方法采用装饰器@classmethod来定义
class Kls(object): num_inst = 0 def __init__(self): Kls.</description>
    </item>
    
    <item>
      <title>About my Blog</title>
      <link>/about/</link>
      <pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>此博客用于记录自己的一些学习笔记与一些感悟。主要做到：
（1）记录生活，在自己的每一天上留下思考的划痕。
（2）整理思路，固化知识，获得更多更好的想法。
（3）分享，将自己的想法、经验与人分享。
（4）交流、提高，通过交流产生更多的思维火花，相互提高。
（5）交友，互相鼓励，一路同行。
github&amp;gt;(https://github.com/zxingq/down)</description>
    </item>
    
    <item>
      <title>know</title>
      <link>/life/2022-10-16-/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/life/2022-10-16-/</guid>
      <description>一叶落，褰珠箔，此时景物正萧索。画楼月影寒，西风吹罗幕，往事思量着。 2022/10/18我亦无他，唯手熟尔 2022/10/23风里已经有冬天的味道了，所以我的意思是，这一年快结束了，所有的遗憾都无法弥补了。老人说推开自己喜欢的东西叫长大，他们还说，放弃自己想要的，就会完美。是啊，完美的最后一笔叫遗憾。
季节变换，好多人忘了好多人，好多人代替好多人，好多人有好多遗憾，好多人是好多人的遗憾。
村上春树说过：“相遇是安排，分离亦是如此，遇见你是美好，之后便是造化。”你决定不了谁的出现，也挽留不了谁的离开，你能做的只有诊惜不期而遇的惊喜，也接受突如其来的离开。
我们说夏天结束了，但其实四季没有斩钉截铁的夏天自然也不是一夜之间戛然而上的，只是某天醒来，得要加一件外套的时候，雨水中带着寒气的时候，才会后知后觉发现原来夏天已经结束了。
人们在睡梦中醒来，又匆匆忙忙面对现实，不怀念才是人生前行的意义。没有什么会永远糟糕下去，山海自有归期，风雨自会相逢。意难平终将和解，万事终将如意。
于人海中遇见你，又将你归还于人海之中。车与车相撞叫车祸，人与人相撞叫爱情。可现实是，车和车总是相让，人和人总是错过。“这个选项没有错，只是它不符合题意。我想我也是。即使以后不再同路，但能够与你并肩走一段实属有幸。
一站有一站的风景，花会沿路盛开，以后的路也是。
2022/10/25</description>
    </item>
    
    <item>
      <title>spider</title>
      <link>/study/spider/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>/study/spider/</guid>
      <description>什么是爬虫
&amp;ndash;通过编写程序 ，模拟浏览器上网，然后在其互联网上抓取数据的过程。
1.爬虫的价值： &amp;ndash;就业
爬虫是否合法
&amp;ndash;在法律中是不被禁止的
&amp;ndash;具有违法的风险
&amp;ndash;善意爬虫 恶意爬虫
爬虫的风险体现在下面2个方面; &amp;ndash;爬虫干扰了被访问网站的正常运行
&amp;ndash;爬虫抓取了收到法律保护的特定类型的数据或信息
如何避免在编写爬虫过程中进局子？ &amp;ndash;时常优化自己的程序，避免干扰被访问网站的正常运行
&amp;ndash;在使用，传播抓取数据时，审核抓取到的内容，如果发现涉及到用户的隐私
商业机密等敏感内容需要及时停止爬取或传播
爬虫在场景中的分类 一.通用爬虫
​	抓取的是系统重要组成部分。抓取的是一整张页面数据。
二.聚焦爬虫
​	建立在通用爬虫的基础上。抓取页面的局部内容。
三.增量式爬虫
​	检测网站中更新的情况。只会抓取更新出来的数据。
2.反爬机制 ​	门户网站，可以通过制定相应的策略或技术手段，防止爬虫程序进行 网站
数据的爬取
反反爬策略
爬虫程序可以通过制定相关的策略或者技术手段，破解门户网站中具备的反爬机制。
robots.txt协议
​	君子协议。规定了网站上哪些数据可以被爬取，哪些数据不可以被爬取。
http协议：
​	&amp;ndash;就是服务器与客户端数据交互的一种形式。
常用请求头信息
​	&amp;ndash;User-Agent:请求载体的身份标识。
​	&amp;ndash;Connection：请求完毕后是断开连接还是保持连接
常用响应头信息
​	&amp;ndash;Content-Type:服务器响应回客户端的数据类型
https协议：
​	&amp;ndash;安全的超文本传输协议
requests模块
​	-urllib模块
​	-requests模块
requests模块;
python中原生的一款基于网络请求模块，功能非常强大，简单便捷，效率极高。
作用:模拟浏览器发请求。
如何使用（requests模块的编码流程）：
​	指定url
mport requestsif __name__==&amp;#34;__main__&amp;#34;:url=&amp;#34;https://www.sogou.com/web&amp;#34; ​	发起请求
kw=input(&amp;#34;enter a word:&amp;#34;)param={&amp;#34;query&amp;#34;:kw}response=requests.</description>
    </item>
    
    <item>
      <title></title>
      <link>/study/2022-11-20-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/study/2022-11-20-java/</guid>
      <description>JavaSE_day06【面向对象基础&amp;ndash;上】 今日内容 类与对象 成员变量 成员方法 学习目标 初步了解面向对象的思想 能够明确类与对象关系 能够掌握类的定义格式 能够掌握创建对象格式 能够通过类访问类的静态成员变量和静态成员方法 能够通过对象访问对象的普通成员变量和普通成员方法 能够区别静态方法和普通方法 能够区别类变量与实例变量 能够区别成员变量与局部变量 能够理解方法的调用执行机制 能够理解方法的参数传递机制 第五章 面向对象基础（上） 5.1 面向对象思想概述 1、概述 Java语言是一种面向对象的程序设计语言，而面向对象思想（OOP）是一种程序设计思想，我们在面向对象思想的指引下，使用Java语言去设计、开发计算机程序。 这里的对象泛指现实中一切事物，每种事物都具备自己的属性和行为。面向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算机事件的设计思想。 它区别于面向过程思想（POP），强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去操作实现。
2、面向对象与面向过程的区别 面向过程：POP: Process-Oriented Programming
​	以函数（方法）为最小单位
​	数据独立于函数之外
​	以过程，步骤为主，考虑怎么做
面向对象：OOP: Object Oriented Programming
​	以类/对象为最小单位，类包括：数据+方法
​	以对象（谁）为主，考虑谁来做，谁能做
面向对象仍然包含面向过程，只不过关注点变了，关注谁来做
程序员的角色：
面向过程：程序员是具体执行者
面向对象：程序员是指挥者
面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。
3、面向对象的基本特征
面向对象的语言中，包含了三大基本特征，即封装、继承和多态。
5.2 类和对象 环顾周围，你会发现很多对象，比如桌子，椅子，同学，老师等。桌椅属于办公用品，师生都是人类。那么什么是类呢？什么是对象呢？
什么是类 类：是一类具有相同特性的事物的抽象描述，是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。 现实中，描述一类事物：
属性：就是该事物的状态信息。 行为：就是该事物能够做什么。 举例：小猫。
​	属性：名字、体重、年龄、颜色。 ​	行为：走、跑、叫。
什么是对象 对象：是一类事物的具体体现。对象是类的一个实例（对象并不是找个女朋友），必然具备该类事物的属性和行为。 现实中，一类事物的一个实例：一只小猫 。
举例：一只小猫。
​	属性：tom、5kg、2 years、yellow。 ​	行为：溜墙根走、蹦跶的跑、喵喵叫。</description>
    </item>
    
  </channel>
</rss>
